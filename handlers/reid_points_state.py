from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import CallbackQuery

from src.player import PlayerScoreService


class RaidState(StatesGroup):
    RaidPoints = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç "–°–µ–≥–æ–¥–Ω—è"
    RaidPointsAll = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç "–ú–µ—Å—è—Ü"
    RaidLazy = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç "–õ–µ—Ç–Ω—è–∏"
    RaidLazyYeserday = State()  # –í—á–µ—Ä–∞


# @dp.message_handler(commands=['start'])
async def start_cmd_handler(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚ú¥Ô∏è–≠–Ω–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data='raid_points'))
    keyboard.add(types.InlineKeyboardButton("‚åõÔ∏è–≠–Ω–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data='raid_points_all'))
    keyboard.add(types.InlineKeyboardButton("ü™´–õ–µ–Ω—Ç—è–∏ —Å–µ–≥–æ–¥–Ω—è", callback_data='raid_lazy'))
    keyboard.add(types.InlineKeyboardButton("üî™–õ–µ–Ω—Ç—è–∏ –≤—á–µ—Ä–∞", callback_data='raid_yesterday'))
    await message.answer("üîã–≠–Ω–∫–∞ —Å–µ—Ä–≤–∏—Åüîã", reply_markup=keyboard)


async def raid_points_handler(call: CallbackQuery, state: FSMContext):
    await RaidState.RaidPoints.set()
    message_strings = await PlayerScoreService.get_raid_scores()
    await call.message.answer(message_strings)


async def raid_points_all_handler(call: CallbackQuery, state: FSMContext):
    await RaidState.RaidPointsAll.set()
    message_strings = await PlayerScoreService.get_raid_scores_all()
    await call.message.answer(message_strings)


async def raid_lazy_handler(call: CallbackQuery, state: FSMContext):
    await RaidState.RaidLazy.set()
    message_strings = await PlayerScoreService.get_reid_lazy_fools()
    await call.message.answer(message_strings)


async def raid_lazy_yesterday_handler(call: CallbackQuery, state: FSMContext):
    await RaidState.RaidLazy.set()
    message_strings = await PlayerScoreService.get_reid_lazy_fools(yesterday=True)
    await call.message.answer(message_strings)


def register_handlers_reid(dp: Dispatcher):
    dp.register_message_handler(start_cmd_handler, commands='reid')
    dp.register_callback_query_handler(raid_points_handler, text='raid_points', state='*')
    dp.register_callback_query_handler(raid_points_all_handler, text='raid_points_all', state='*')
    dp.register_callback_query_handler(raid_lazy_handler, text='raid_lazy', state='*')
    dp.register_callback_query_handler(raid_lazy_yesterday_handler, text='raid_yesterday', state='*')
