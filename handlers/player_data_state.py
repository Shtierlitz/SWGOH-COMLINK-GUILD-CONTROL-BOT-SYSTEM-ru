# handlers/player_data.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from middlewares.user_check import guild_members
from src.graphics import get_player_gp_graphic, get_player_rank_graphic, get_month_player_graphic
from src.player import PlayerData
from create_bot import bot
from keyboards.players_kb import create_keyboard, create_player_info_keyboard
from db_models import Player
from src.utils import get_player_by_name_or_nic
from typing import Union, Optional


class PlayerState(StatesGroup):
    initial_state = State()
    player_name = State()
    player_data = State()
    back = State()


async def cancel_handler(message: types.Message, state: FSMContext):
    is_guild_member = message.conf.get('is_guild_member', False)
    if is_guild_member:
        if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
            await state.reset_state()
            await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=types.ReplyKeyboardRemove())


async def player_buttons(call: Union[types.CallbackQuery, types.Message], state: Optional[FSMContext] = None):
    if isinstance(call, types.CallbackQuery):
        user_id = str(call.from_user.id)
        message = call.message
    elif isinstance(call, types.Message):
        user_id = str(call.from_user.id)
        message = call
    else:
        raise ValueError("call –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–∞ CallbackQuery –∏–ª–∏ Message")

    is_guild_member = any(
        user_id in member.values() for dictionary in guild_members for member in dictionary.values())
    if is_guild_member:
        kb = await create_keyboard()  # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.reply("–í—ã–±–µ—Ä–µ—Ç–µ —á–ª–µ–Ω–∞ –≥–∏–ª—å–¥–∏–∏.", reply_markup=kb)  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if state:
            await PlayerState.player_name.set()


async def player_info_buttons(message: types.Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ —Å –∏–Ω—Ñ–æ–π –æ–± –∏–≥—Ä–æ–∫–µ"""
    is_guild_member = message.conf.get('is_guild_member', False)
    if is_guild_member:
        if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
            return await cancel_handler(message, state)
        player_name = message.text
        if player_name == 'üîô–ù–∞–∑–∞–¥':
            await back_handler(message, state)
        if player_name.startswith("@"):
            player_name = player_name.replace("@", "")
            await state.update_data(player_name=player_name)
            player = await get_player_by_name_or_nic(player_name)
        else:
            await state.update_data(player_name=player_name)
            player = await get_player_by_name_or_nic(player_name)

        if not player:  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await state.reset_state()
            await message.answer('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=types.ReplyKeyboardRemove())
        else:
            kb = await create_player_info_keyboard(player_name)  # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.reply(f"–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ {player_name}.", reply_markup=kb)
            await PlayerState.player_data.set()  # –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def player_data_info(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–≥—Ä–æ–∫—É"""
    is_guild_member = message.conf.get('is_guild_member', False)
    if not is_guild_member or message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        return await cancel_handler(message, state)

    data = await state.get_data()
    player_name = data.get("player_name")
    player = await get_player_by_name_or_nic(player_name)

    if not player:  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        return await cancel_handler(message, state)

    key = message.text
    if key == 'üîô–ù–∞–∑–∞–¥':
        return await back_handler(message, state)

    graphic_keys = {
        "üìä –ì–ú –∑–∞ –º–µ—Å—è—Ü": (get_player_gp_graphic, (player.name, 'month')),
        "üìä –ì–ú –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è": (get_player_gp_graphic, (player.name, 'year')),
        "üìä –ø–µ—à–∫–∞ –∑–∞ –º–µ—Å—è—Ü": (get_player_rank_graphic, (player.name, 'month', False)),
        "üìä —Ñ–ª–æ—Ç –∑–∞ –º–µ—Å—è—Ü": (get_player_rank_graphic, (player.name, 'month', True)),
        "üìä –ø–µ—à–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è": (get_player_rank_graphic, (player.name, 'year', False)),
        "üìä —Ñ–ª–æ—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è": (get_player_rank_graphic, (player.name, 'year', True)),
        "üìä —ç–Ω–∫–∞ –∑–∞ –º–µ—Å—è—Ü": (get_month_player_graphic, (player.name,))  # –ø–µ—Ä–µ–¥–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –≤ –∫–æ—Ä—Ç–µ–∂–µ
    }

    if key in graphic_keys:
        try:
            func, args = graphic_keys[key]
            image = await func(*args)
            return await bot.send_photo(chat_id=message.chat.id, photo=image)
        except Exception as e:
            return await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: \n\n‚ùå‚ùå{e}‚ùå‚ùå\n\n"
                                       f"–í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∏ –¥–∞–Ω–Ω—ã—Ö –µ–∑–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –∑–∞ 2-3 –¥–Ω—è —Ö–æ—Ç—è –±—ã.\n"
                                       f"–ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –¥–Ω–µ–π.")
    if key == 'üóí–í—Å–µ –¥–∞–Ω–Ω—ã–µ':
        all_data = await PlayerData().extract_data(player)
        return await message.reply(all_data)

    # –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞–º –∏–≥—Ä–æ–∫–∞
    await state.reset_state()
    return await message.answer('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω.',
                                reply_markup=types.ReplyKeyboardRemove())


async def default_state_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞."""
    is_guild_member = message.conf.get('is_guild_member', False)
    if is_guild_member:

        valid_commands = [column.name for column in Player.__table__.columns]
        valid_commands.append('üîô–ù–∞–∑–∞–¥')
        valid_commands.append('–í—Å–µ –¥–∞–Ω–Ω—ã–µ')

        if message.text not in valid_commands:
            await state.reset_state()
            await message.reply("‚ùå –í–≤–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω.",
                                reply_markup=types.ReplyKeyboardRemove())


async def back_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤—ã–±–æ—Ä—É."""
    is_guild_member = message.conf.get('is_guild_member', False)
    if is_guild_member:
        current_state = await state.get_state()
        if current_state == "PlayerState:player_data":
            kb = await create_keyboard()  # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.reply("–í—ã–±–µ—Ä–µ—Ç–µ —á–ª–µ–Ω–∞ –≥–∏–ª—å–¥–∏–∏.", reply_markup=kb)  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await PlayerState.player_name.set()
        elif current_state == "PlayerState:player_name":
            await PlayerState.initial_state.set()
            await message.answer('–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –Ω–∞—á–∞–ª—É', reply_markup=types.ReplyKeyboardRemove())
            # –î–æ–±–∞–≤—å—Ç–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await player_buttons(message)
        else:
            await state.finish()


def register_handlers_player(dp: Dispatcher):
    dp.register_callback_query_handler(player_buttons, text='player')

    dp.register_message_handler(cancel_handler, commands=['cencel'], state="*")  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã

    dp.register_message_handler(player_info_buttons, content_types=types.ContentType.TEXT,
                                state=PlayerState.player_name)
    dp.register_message_handler(player_data_info, content_types=types.ContentType.TEXT, state=PlayerState.player_data)
    dp.register_message_handler(back_handler, commands=['back'], state="*")  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞

    dp.register_message_handler(default_state_handler, content_types=types.ContentType.TEXT,
                                state=[PlayerState.player_name, PlayerState.player_data])
