# api_utils.py
import asyncio
import json
import os
import random
import re
from typing import Tuple, List

import aiohttp
import pytz
from datetime import datetime, timedelta, time
from aiogram import types, Bot
from sqlalchemy import select

from create_bot import bot
from db_models import Player
from settings import async_session_maker
from aiogram.utils.exceptions import ChatNotFound
import random as rn


async def gac_statistic() -> tuple:
    """–í—ã–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–æ–∫–∞–º –∑–∞—Ä–µ–≥–∞–ª–∏—Å—å –Ω–∞ –í–ì –∏–ª–∏ –Ω–µ—Ç."""
    new_day_start = get_new_day_start()
    async with async_session_maker() as session:
        query = await session.execute(
            select(Player).filter(
                Player.update_time >= new_day_start))
        players_list = query.scalars().all()
    result = []
    count_true = 0
    count_false = 0
    link_pre = 'https://swgoh.gg/p/'
    for i in players_list:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"http://api.swgoh.gg/player/{i.ally_code}/gac-bracket/") as request:
                if request.status == 200:
                    request.raise_for_status()
                    data = await request.json()

                    message = f"{i.name} –∑–∞—Ä–µ–≥–∞–Ω. –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏: \n"
                    bracket_players = data['data']['bracket_players']
                    temp_list = []

                    for j in bracket_players:
                        if j['player_name'] == i.name:
                            pass
                        else:
                            st = f"[{j['player_name']}]({link_pre}{j['ally_code']})"
                            temp_list.append(st)

                    message += ", ".join(temp_list)
                    result.append(message)
                    count_true += 1
                else:
                    result.append(f'{i.name} –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω')
                    count_false += 1

    result.append(f"‚úÖ –ó–∞—Ä–µ–≥–∞–Ω–Ω—ã—Ö –≤—Å–µ–≥–æ: {count_true}" if count_true == 50 else f"‚ùóÔ∏è –ó–∞—Ä–µ–≥–∞–Ω–Ω—ã—Ö –≤—Å–µ–≥–æ: {count_true}")
    result.append("‚úÖ –ó–∞–≤—Ç—ã–∫–∞–≤—à–∏—Ö –Ω–µ—Ç" if count_false == 0 else f"üö∑ –ó–∞–≤—Ç—ã–∫–∞–ª–∏: {count_false}")
    st_1, st_2, st_3, st_4, st_5 = split_list(result)
    return f'\n{"-" * 30}\n'.join(st_1), f'\n{"-" * 30}\n'.join(st_2), f'\n{"-" * 30}\n'.join(
        st_3), f'\n{"-" * 30}\n'.join(st_4), f'\n{"-" * 30}\n'.join(st_5)


def split_list(input_list: list, parts: int = 5) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ —Ä–∞–≤–Ω–æ –ø–æ–¥–µ–ª–µ–Ω–Ω—ã–º–∏"""
    length = len(input_list)
    return [input_list[i * length // parts: (i + 1) * length // parts]
            for i in range(parts)]


def get_new_day_start() -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤ .env —Ñ–∞–π–ª–µ (16:30 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    moscow_tz = pytz.timezone(os.environ.get('TIME_ZONE'))
    naive_now = datetime.now(moscow_tz)
    now = naive_now.replace(tzinfo=None)
    today = now.date()
    new_day_start = datetime.combine(today, time(int(os.environ.get("DAY_UPDATE_HOUR", "16")),
                                                 int(os.environ.get("DAY_UPDATE_MINUTES", "30"))))

    if now < new_day_start:
        new_day_start = new_day_start - timedelta(days=1)

    return new_day_start


async def get_players_list_from_ids(message: types.Message) -> Tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ ids.json"""
    file_path = os.path.join(os.path.dirname(__file__), '..', os.environ.get("IDS_JSON"))
    if os.path.exists(file_path):
        with open(file_path, "r", encoding='utf-8') as json_file:
            data = json.load(json_file)

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        msg_list = []
        for index, player in enumerate(data):
            for ally_code, info in player.items():
                msg = (
                    f"{index + 1}: {info['player_name']}\n"
                    f"–ö–æ–¥ —Å–æ—é–∑–Ω–∏–∫–∞: {ally_code}\n"
                    f"ID: {info['tg_id']}\n"
                    f"TG_NIC: {info['tg_nic']}\n"
                    f"{'-' * 30}\n"
                )
                msg_list.append(msg)
        msg_list.append(f"–í—Å–µ–≥–æ: {len(data)}")
        final_lst_1, final_lst_2 = split_list(msg_list, 2)  # hfpltkztv
        # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω—É –±–æ–ª—å—à—É—é —Å—Ç—Ä–æ–∫—É
        final_msg_1 = ''.join(final_lst_1)
        final_msg_2 = ''.join(final_lst_2)

        return final_msg_1, final_msg_2
    else:
        await bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª ids.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def add_player_to_ids(message: types.Message, new_data: dict) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ ids.json"""

    # –∏–º—è –∏–≥—Ä–æ–∫–∞, –∫–æ–¥ –∏ ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∏ –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    player_name, ally_code, tg_id, tg_nic = new_data['player_name'], new_data["ally_code"], new_data['tg_id'], new_data[
        'tg_nic']

    file_path = os.path.join(os.path.dirname(__file__), '..', os.environ.get("IDS_JSON"))
    if os.path.exists(file_path):
        with open(file_path, "r") as json_file:
            data = json.load(json_file)
        if len(data) >= 50:
            await bot.send_message(message.chat.id, f"‚ùå–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ —á–ª–µ–Ω–æ–≤ –≥–∏–ª—å–¥–∏–∏. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n"
                                                    f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
            data.append({
                ally_code: {
                    "player_name": player_name,
                    "tg_id": tg_id,
                    "tg_nic": tg_nic
                }
            })

            # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª
            with open(file_path, "w") as json_file:
                json.dump(data, json_file, ensure_ascii=False)

            await bot.send_message(message.chat.id, f"‚úÖ –ò–≥—Ä–æ–∫ {player_name} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.\n\n"
                                                    f"‚ö†Ô∏è –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫, "
                                                    f"—á—Ç–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å\n"
                                                    f"–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —É–¥–∞–ª–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    else:
        await bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª ids.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def delete_player_from_ids(message: types.Message, player_name):
    file_path = os.path.join(os.path.dirname(__file__), f'../{os.environ.get("IDS_JSON")}')

    with open(file_path, 'r', encoding='utf-8') as json_file:
        data = json.load(json_file)

    player_found = False  # —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –Ω–∞–π–¥–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫

    for index, player in enumerate(data):
        for ally_code, info in player.items():
            if info["player_name"] == player_name:
                del data[index]  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–≥—Ä–æ–∫–∞
                player_found = True  # –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω
                break

        if player_found:
            break
    else:
        await message.reply("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(file_path, 'w', encoding='utf-8') as json_file:
        json.dump(data, json_file, ensure_ascii=False, indent=2)

    await bot.send_message(message.chat.id, f"‚úÖ –ò–≥—Ä–æ–∫ {player_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")


async def send_photo_message(tg_id: str or int, caption_text: str):
    # —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –≤–∞—à–µ–π –ø–∞–ø–∫–µ
    media_folder = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'media')

    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    files = os.listdir(media_folder)

    # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª
    random_file = random.choice(files)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
    photo_path = os.path.join(media_folder, random_file)

    with open(photo_path, 'rb') as photo:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if random_file.lower().endswith('.gif'):
            await bot.send_animation(tg_id, photo, caption=caption_text)
        else:
            await bot.send_photo(tg_id, photo, caption=caption_text)


async def format_scores(sorted_scores, filter_points, total=True, powers=False):
    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
    filtered_scores = [
        player for player in sorted_scores
        if filter_points is None or player[1] < filter_points
    ]
    if powers:
        reid_scores = [
            f"{i + 1}. {player[0]} {player[1]} –≥–º"
            for i, player in enumerate(filtered_scores)
        ]
    else:
        reid_scores = [
            f"{i + 1}. {player[0]} {player[1]} –∫—É–ø–æ–Ω–æ–≤"
            for i, player in enumerate(filtered_scores)
        ]
    if total:
        reid_scores.append(f"–í—Å–µ–≥–æ: {len(reid_scores)}")
    return reid_scores


async def check_guild_players(message: types.Message):
    is_guild_member = message.conf.get('is_guild_member', False)
    if is_guild_member:
        # try:
        file_path = os.path.join(os.path.dirname(__file__), f'../{os.environ.get("IDS_JSON")}')
        with open(file_path, 'r', encoding='utf-8') as file:
            players = json.load(file)

        for player in players:
            player_info = list(player.values())[0]
            print(player_info)
            player_tg_id = player_info['tg_id']
            player_tg_nic = player_info['tg_nic']
            player_name = player_info['player_name']
            try:
                if player_tg_id is None or player_tg_id == 'null' or len(player_tg_id) < 2:
                    await bot.send_message(os.environ.get('OFFICER_CHAT_ID'),
                                           f"‚ö†Ô∏è –ò–≥—Ä–æ–∫: {player_name}, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π –¢–ì ID")
                    await asyncio.sleep(3)
                elif player_tg_nic is None or player_tg_nic == 'null' or len(player_tg_nic) < 2:
                    await bot.send_message(os.environ.get('OFFICER_CHAT_ID'),
                                           f"‚ö†Ô∏è –£ –∏–≥—Ä–æ–∫–∞: {player_name}, –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –¢–ì –Ω–∏–∫")
                    await asyncio.sleep(3)
                else:
                    sent_message = await bot.send_message(player_tg_id,
                                                          f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞. –ù–µ –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏—è. –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                    await bot.delete_message(sent_message.chat.id, sent_message.message_id)
                    await asyncio.sleep(3)
            except ChatNotFound:
                await bot.send_message(os.environ.get('OFFICER_CHAT_ID'),
                                       f"‚ùå –ò–≥—Ä–æ–∫: {player_name} @{player_tg_nic}, –Ω–µ –Ω–∞–∂–∞–ª –°–¢–ê–†–¢ –∏–ª–∏ –±—ã–ª –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã ID")
                await asyncio.sleep(3)
        await bot.send_message(os.environ.get('OFFICER_CHAT_ID'),
                               f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    # except Exception as e:
    #     await message.reply(f"–û—à–∏–±–∫–∞: {e}.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞ –≤ –ª–∏—á–∫—É:\nhttps://t.me/rollbar")


def get_localized_datetime(timestamp_millis: int, timezone_str: str = None) -> datetime:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç timestamp –∏–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ datetime —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã"""

    timestamp_seconds = timestamp_millis / 1000  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
    date_object = datetime.utcfromtimestamp(timestamp_seconds)

    # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –≤ UTC
    if timezone_str is None:
        return date_object

    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    time_z = pytz.timezone(timezone_str)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç UTC –≤ —á–∞—Å–∞—Ö
    utc_offset_hours = time_z.utcoffset(date_object).total_seconds() / 3600

    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–º–µ—â–µ–Ω–∏–µ –∫ –Ω–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    date_object = date_object + timedelta(hours=utc_offset_hours)

    return date_object


async def delete_db_player_data(val):
    """–ë–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–≥—Ä–æ–∫–æ–º –∏–∑ –ë–î"""
    async with async_session_maker() as session:
        player_records = await session.execute(
            select(Player).filter_by(name=val))
        player_records = player_records.scalars().all()
        if len(player_records) == 0:
            try:
                async with async_session_maker() as session:
                    player_records = await session.execute(
                        select(Player).filter_by(ally_code=int(val)))
                    player_records = player_records.scalars().all()
                    if len(player_records) == 0:
                        await bot.send_message(os.environ.get('OFFICER_CHAT_ID'),
                                               f"‚ùå –ò–≥—Ä–æ–∫ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º {val} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
                                               f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–¥–∞ —Å–æ—é–∑–Ω–∏–∫–∞")
                        return
            except Exception as e:
                await bot.send_message(os.environ.get('OFFICER_CHAT_ID'), f"‚ùå –ò–≥—Ä–æ–∫ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º {val} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
                                                                          f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–¥–∞ —Å–æ—é–∑–Ω–∏–∫–∞")
                return
    player_name: str = player_records[0].name
    for player in player_records:
        async with async_session_maker() as session:
            await session.delete(player)
            await session.commit()

    return player_name


async def send_points_message(player: Player, speach_list: list, rus: bool):
    try:
        await send_photo_message(player.tg_id,
                                 f"{player.name}, {rn.choice(speach_list)} {player.reid_points} {'–∫—É–ø–æ–Ω–æ–≤' if rus else 'points'}.")
        print(f"{player.name} —ç–Ω–∫–∞")
    except ChatNotFound as e:
        await bot.send_message(os.environ.get('OFFICER_CHAT_ID'),
                               f"‚ùå –£ {player.name} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —Ç–µ–ª–µ–≥–∞ –∫ —á–∞—Ç—É.")


async def get_player_by_name_or_nic(player_name: str) -> Player:
    """–ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –ø–æ —Ç–≥ –Ω–∏–∫—É –∏–ª–∏ –ø–æ –∏–º–µ–Ω–∏ –∞–∫–∫–∞"""
    new_day_start = get_new_day_start()  # –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    async with async_session_maker() as session:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ Player.name
        query = await session.execute(
            select(Player).filter(Player.update_time >= new_day_start, Player.name == player_name)
        )
        player = query.scalars().first()

        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏, –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ tg_nic
        if not player:
            query = await session.execute(
                select(Player).filter(Player.update_time >= new_day_start, Player.tg_nic == player_name)
            )
            player = query.scalars().first()
        return player


async def get_end_date():
    now = get_new_day_start()
    if now.month == 12:
        end = datetime(now.year + 1, 1, 1, now.hour, now.minute) - timedelta(days=1)
    else:
        end = datetime(now.year, now.month + 1, 1, now.hour, now.minute) - timedelta(days=1)
    return end


async def is_admin(bot: Bot, user_id, chat_id) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.is_chat_admin() or member.is_chat_creator()
    except:
        member = await bot.get_chat_member(chat_id.id, user_id.id)
        return member.is_chat_admin() or member.is_chat_creator()


async def get_monthly_records(player_name: str) -> List[Player]:
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        query = select(Player).order_by(Player.update_time).filter_by(name=player_name)
        result = await session.execute(query)
        all_records = result.scalars().all()

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if not all_records:
            return []

        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –∑–∞–ø–∏—Å–∏
        monthly_records = [all_records[0]]

        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        current_date = all_records[0].update_time
        for record in all_records:
            if record.update_time.month != current_date.month or record.update_time.year != current_date.year:
                monthly_records.append(record)
                current_date = record.update_time

        return monthly_records


async def is_super_admin(tg_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    env_members = os.environ.get("SUPER_ADMINS")
    eng_members_list = list(map(int, env_members.split(",")))
    if tg_id in eng_members_list:
        return True
    return False


async def is_member_admin_super(call: types.CallbackQuery = None, super_a: bool = False, message: types.Message = None):
    if message:
        is_guild_member = message.conf.get('is_guild_member', False)
        admin = await is_admin(bot, message.from_user, message.chat)
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        tg_id = member['user']['id']
        super_admin = await is_super_admin(tg_id)
        if super_a:
            return is_guild_member, admin, super_admin
        return is_guild_member, admin
    is_guild_member = call.message.conf.get('is_guild_member', False)
    admin = await is_admin(bot, call.from_user, call.message.chat)
    member = await bot.get_chat_member(call.message.chat.id, call.from_user.id)
    tg_id = member['user']['id']
    super_admin = await is_super_admin(tg_id)
    if super_a:
        return is_guild_member, admin, super_admin
    return is_guild_member, admin


def is_valid_name(name):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
    return bool(re.match('^[a-zA-Z0-9_-]*$', name))


async def send_id(bot, message: types.Message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
    current_file_path = os.path.realpath(__file__)
    # –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    current_dir_path = os.path.dirname(current_file_path)
    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ ids.json
    ids_file_path = os.path.join(current_dir_path, '..', os.environ.get('IDS_JSON'))

    # –ó–∞–≥—Ä—É–∑–∏—Ç—å ids.json –≤ –ø–∞–º—è—Ç—å
    with open(ids_file_path) as f:
        guild_members = json.load(f)

    my_chat_id = int(os.environ.get('MY_ID'))
    user_id = str(message.from_user.id)

    # –ù–∞–π—Ç–∏ player_name –ø–æ user_id
    player_name = None
    for dictionary in guild_members:
        for player_data in dictionary.values():
            if player_data.get('tg_id') == user_id:
                player_name = player_data.get('player_name')
                break

    if player_name:
        await bot.send_message(my_chat_id, f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, –ò–º—è –∏–≥—Ä–æ–∫–∞: {player_name}")
    else:
        await bot.send_message(my_chat_id, f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ guild_members.")
